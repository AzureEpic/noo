--// Load Orion
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/AzureEpic/noo/refs/heads/main/s.lua')))()

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera

local player = Players.LocalPlayer
local character = player.Character -- Initialize character
local originalWalkSpeed = 16 -- Default value

-- Vars
local flying = false
local flyPart = nil
local moveDir = Vector3.zero
local speed = 50
local stationary = false
local highlight = nil
local uiInstance = nil
local disableWalkspeed = false
local camFollowsPart = false
local lastCamSubject = nil

-- Function to update character and apply walkspeed changes
local function updateCharacter(newCharacter)
    character = newCharacter
    if character then
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            originalWalkSpeed = humanoid.WalkSpeed -- Update original walkspeed
            if flying and disableWalkspeed then
                humanoid.WalkSpeed = 0
            else
                humanoid.WalkSpeed = originalWalkSpeed
            end
        end
    end
end

-- Initial character setup
if player.Character then
    updateCharacter(player.Character)
end

-- Listen for character changes (e.g., after respawn)
player.CharacterAdded:Connect(function(newCharacter)
    updateCharacter(newCharacter)
    -- Wait for HumanoidRootPart to be available in the new character
    newCharacter:WaitForChild("HumanoidRootPart")

    -- If flying mode is active, attempt to switch to the nearest part from the new spawn location
    if flying then
        local newNearestPart = getNearestFlyablePart()
        if newNearestPart and newNearestPart ~= flyPart then
            -- Perform the switch logic
            removeHighlight()
            if flyPart then
                for _, obj in flyPart:GetChildren() do
                    if obj:IsA("BodyVelocity") or obj:IsA("BodyGyro") or obj:IsA("BodyForce") then
                        obj:Destroy()
                    end
                end
            end

            flyPart = newNearestPart
            setupFly(flyPart)
            OrionLib:MakeNotification({
                Name = "Switched (Respawn)",
                Content = "Now flying: " .. newNearestPart.Name,
                Time = 3
            })
        elseif not newNearestPart then
            -- If no part found after respawn, disable flying
            flying = false
            OrionLib:MakeNotification({
                Name = "No Part After Respawn",
                Content = "No nearby part to fly after respawn. Flying disabled.",
                Time = 3
            })
        end
    end

    -- Re-apply camera subject if camera follows part is enabled
    if camFollowsPart and flyPart then
        Camera.CameraSubject = flyPart
    else
        local hum = newCharacter:FindFirstChildWhichIsA("Humanoid")
        if hum then
            Camera.CameraSubject = hum
        end
    end
end)


-- Movement input
-- Movement input
UserInputService.InputBegan:Connect(function(input, gpe)
    if gpe then return end
    if input.KeyCode == Enum.KeyCode.W then moveDir += Vector3.new(0, 0, -1) end
    if input.KeyCode == Enum.KeyCode.S then moveDir += Vector3.new(0, 0, 1) end
    if input.KeyCode == Enum.KeyCode.A then moveDir += Vector3.new(-1, 0, 0) end
    if input.KeyCode == Enum.KeyCode.D then moveDir += Vector3.new(1, 0, 0) end -- CORRECTED LINE
end)

UserInputService.InputEnded:Connect(function(input, gpe)
    if gpe then return end
    if input.KeyCode == Enum.KeyCode.W then moveDir -= Vector3.new(0, 0, -1) end
    if input.KeyCode == Enum.KeyCode.S then moveDir -= Vector3.new(0, 0, 1) end
    if input.KeyCode == Enum.KeyCode.A then moveDir -= Vector3.new(-1, 0, 0) end
    if input.KeyCode == Enum.KeyCode.D then moveDir -= Vector3.new(1, 0, 0) end -- CORRECTED LINE
end)

-- Get nearest part from workspace.Blocks[player.Name]
local function getNearestFlyablePart()
    if not character or not character:FindFirstChild("HumanoidRootPart") then
        warn("Character or HumanoidRootPart not found for getNearestFlyablePart.")
        return nil
    end

    local blockFolder = workspace:FindFirstChild("Blocks")
    local blockGroup = blockFolder and blockFolder:FindFirstChild(player.Name)
    if not blockGroup then return end

    local closest, shortest = nil, math.huge
    local humanoidRootPartPosition = character.HumanoidRootPart.Position

    for _, obj in pairs(blockGroup:GetDescendants()) do
        if obj:IsA("BasePart") then
            local dist = (obj.Position - humanoidRootPartPosition).Magnitude
            if dist < shortest then
                shortest = dist
                closest = obj
            end
        end
    end
    return closest
end

-- Remove previous highlight
local function removeHighlight()
    if highlight then
        highlight:Destroy()
        highlight = nil
    end
end

-- Setup part highlight
local function applyHighlight(part)
    removeHighlight()
    highlight = Instance.new("Highlight")
    highlight.Name = "DroneHighlight"
    highlight.FillColor = Color3.fromRGB(255, 255, 127)
    highlight.OutlineColor = Color3.fromRGB(255, 255, 0)
    highlight.Adornee = part
    highlight.Parent = part
end

-- Setup flight body movers
local function setupFly(part)
    -- Cleanup existing movers on the part
    for _, obj in ipairs(part:GetChildren()) do
        if obj:IsA("BodyVelocity") or obj:IsA("BodyGyro") or obj:IsA("BodyForce") or obj:IsA("BodyPosition") then
            obj:Destroy()
        end
    end

    -- BodyForce for anti-gravity
    local force = Instance.new("BodyForce")
    force.Force = Vector3.new(0, part:GetMass() * workspace.Gravity, 0)
    force.Name = "Fly_Force"
    force.Parent = part

    -- BodyVelocity
    local bv = Instance.new("BodyVelocity")
    bv.Velocity = Vector3.zero
    bv.MaxForce = Vector3.new(1, 1, 1) * 1e6
    bv.P = 1250
    bv.Name = "Fly_Velocity"
    bv.Parent = part

    -- BodyGyro
    local gyro = Instance.new("BodyGyro")
    gyro.MaxTorque = Vector3.new(1, 1, 1) * 1e6
    gyro.P = 5000
    gyro.CFrame = Camera.CFrame
    gyro.Name = "Fly_Gyro"
    gyro.Parent = part

    applyHighlight(part)
end

local savedPos, savedCFrame

local function setStationaryMode(state)
    if not flyPart then return end

    if state then
        savedPos = flyPart.Position
        savedCFrame = flyPart.CFrame

        -- Destroy velocity + gyro if present
        local bv = flyPart:FindFirstChild("Fly_Velocity")
        local gyro = flyPart:FindFirstChild("Fly_Gyro")
        if bv then bv:Destroy() end
        if gyro then gyro:Destroy() end

        -- Add BodyPosition to freeze position
        local bp = Instance.new("BodyPosition")
        bp.Name = "Stationary_Position"
        bp.Position = savedPos
        bp.MaxForce = Vector3.new(1e6, 1e6, 1e6)
        bp.P = 3000
        bp.D = 600
        bp.Parent = flyPart

        -- Add BodyGyro to freeze orientation
        local bg = Instance.new("BodyGyro")
        bg.Name = "Stationary_Gyro"
        bg.CFrame = savedCFrame
        bg.MaxTorque = Vector3.new(1e6, 1e6, 1e6)
        bg.P = 5000
        bg.D = 500
        bg.Parent = flyPart

    else
        -- Remove locking movers
        local bp = flyPart:FindFirstChild("Stationary_Position")
        local bg = flyPart:FindFirstChild("Stationary_Gyro")
        if bp then bp:Destroy() end
        if bg then bg:Destroy() end

        -- Re-apply flying movers if flying is true
        if flying then
            setupFly(flyPart)
        end
    end
end


-- Setup input tracking
local UserInputService = game:GetService("UserInputService")
local inputState = {
    W = false,
    A = false,
    S = false,
    D = false
}

UserInputService.InputBegan:Connect(function(input, gpe)
    if gpe then return end
    local key = input.KeyCode
    if key == Enum.KeyCode.W then inputState.W = true end
    if key == Enum.KeyCode.A then inputState.A = true end
    if key == Enum.KeyCode.S then inputState.S = true end
    if key == Enum.KeyCode.D then inputState.D = true end
end)

UserInputService.InputEnded:Connect(function(input, gpe)
    if gpe then return end
    local key = input.KeyCode
    if key == Enum.KeyCode.W then inputState.W = false end
    if key == Enum.KeyCode.A then inputState.A = false end
    if key == Enum.KeyCode.S then inputState.S = false end
    if key == Enum.KeyCode.D then inputState.D = false end
end)

-- Main loop
RunService.RenderStepped:Connect(function()
    if flying and flyPart and not stationary then
        local bv = flyPart:FindFirstChild("Fly_Velocity")
        local gyro = flyPart:FindFirstChild("Fly_Gyro")

        if bv then
            local camCF = Camera.CFrame
            local forward = camCF.LookVector
            local right = camCF.RightVector

            local currentMoveDir = Vector3.zero
            if inputState.W then currentMoveDir += forward end
            if inputState.S then currentMoveDir -= forward end
            if inputState.A then currentMoveDir -= right end
            if inputState.D then currentMoveDir += right end

            -- Don't normalize if moveDir is zero (avoids NaN)
            if currentMoveDir.Magnitude > 0 then
                bv.Velocity = currentMoveDir.Unit * speed
            else
                bv.Velocity = Vector3.zero
            end
        end

        if gyro then
            gyro.CFrame = CFrame.new(flyPart.Position, flyPart.Position + Camera.CFrame.LookVector)
        end
    elseif flying and flyPart and stationary then
        -- Ensure velocity is zero when stationary
        local bv = flyPart:FindFirstChild("Fly_Velocity")
        if bv then bv.Velocity = Vector3.zero end
    end
end)


-- Orion UI
local Window = OrionLib:MakeWindow({
    Name = "Drone UI 2.0",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "DroneStuff"
})

local MainTab = Window:MakeTab({
    Name = "Main",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

MainTab:AddToggle({
    Name = "Enable Fly Mode",
    Default = false,
    Callback = function(val)
        flying = val
        if val then
            if not flyPart then
                flyPart = getNearestFlyablePart()
            end
            if flyPart then
                setupFly(flyPart)
                OrionLib:MakeNotification({
                    Name = "Flying!",
                    Content = "Now flying: " .. flyPart.Name,
                    Time = 3
                })
            else
                flying = false
                OrionLib:MakeNotification({
                    Name = "No Part",
                    Content = "No nearby part to fly :(",
                    Time = 3
                })
            end
            -- Apply walkspeed change immediately if flying is enabled
            local char = player.Character
            local hum = char and char:FindFirstChildWhichIsA("Humanoid")
            if hum and disableWalkspeed then
                originalWalkSpeed = hum.WalkSpeed
                hum.WalkSpeed = 0
            end
        else
            -- Only destroy velocity & gyro, keep flyPart and highlight
            if flyPart then
                local bv = flyPart:FindFirstChild("Fly_Velocity")
                local gyro = flyPart:FindFirstChild("Fly_Gyro")
                local force = flyPart:FindFirstChild("Fly_Force")
                local bp = flyPart:FindFirstChild("Stationary_Position")
                local bg = flyPart:FindFirstChild("Stationary_Gyro")

                if bv then bv:Destroy() end
                if gyro then gyro:Destroy() end
                if force then force:Destroy() end
                if bp then bp:Destroy() end
                if bg then bg:Destroy() end
            end
            removeHighlight() -- Also remove highlight when flying is disabled

            -- Restore walkspeed when flying is disabled
            local char = player.Character
            local hum = char and char:FindFirstChildWhichIsA("Humanoid")
            if hum then
                hum.WalkSpeed = originalWalkSpeed
            end
        end
    end
})


MainTab:AddSlider({
    Name = "Flight Speed",
    Min = 5,
    Max = 1000,
    Default = 50,
    Color = Color3.fromRGB(255,255,255),
    Increment = 5,
    ValueName = "speed",
    Callback = function(val)
        speed = val
    end
})

MainTab:AddToggle({
    Name = "Stationary Mode",
    Default = false,
    Callback = function(state)
        stationary = state
        setStationaryMode(state)
    end
})




MainTab:AddToggle({
    Name = "Camera Follows Fly Part",
    Default = false,
    Callback = function(val)
        camFollowsPart = val

        if camFollowsPart and flyPart then
            lastCamSubject = Camera.CameraSubject
            Camera.CameraSubject = flyPart
        else
            if lastCamSubject then
                Camera.CameraSubject = lastCamSubject
            else
                local char = player.Character
                local hum = char and char:FindFirstChildWhichIsA("Humanoid")
                if hum then
                    Camera.CameraSubject = hum
                end
            end
        end
    end
})


MainTab:AddToggle({
    Name = "Disable WalkSpeed While Flying",
    Default = false,
    Callback = function(val)
        disableWalkspeed = val
        local char = player.Character
        local hum = char and char:FindFirstChildWhichIsA("Humanoid")
        if hum then
            if flying and disableWalkspeed then
                originalWalkSpeed = hum.WalkSpeed
                hum.WalkSpeed = 0
            else
                hum.WalkSpeed = originalWalkSpeed
            end
        end
    end
})




-- ✅ Fixed "Switch to Nearest Part"
MainTab:AddButton({
    Name = "Switch to Nearest Part",
    Callback = function()
        local new = getNearestFlyablePart()
        if new and new ~= flyPart then
            -- Remove highlight + movers from old part
            removeHighlight()
            if flyPart then
                for _, obj in flyPart:GetChildren() do
                    if obj:IsA("BodyVelocity") or obj:IsA("BodyGyro") or obj:IsA("BodyForce") or obj:IsA("BodyPosition") then
                        obj:Destroy()
                    end
                end
            end

            flyPart = new
            setupFly(flyPart)
            OrionLib:MakeNotification({
                Name = "Switched",
                Content = "Now flying: " .. new.Name,
                Time = 3
            })
        elseif not new then
            OrionLib:MakeNotification({
                Name = "No Part",
                Content = "No nearby part to switch to :(",
                Time = 3
            })
        end
    end
})


MainTab:AddButton({
    Name = "Shutdown UI & Cleanup",
    Callback = function()
        removeHighlight()
        if flyPart then
            for _, obj in flyPart:GetChildren() do
                if obj:IsA("BodyVelocity") or obj:IsA("BodyGyro") or obj:IsA("BodyForce") or obj:IsA("BodyPosition") then
                    obj:Destroy()
                end
            end
        end
        flying = false
        flyPart = nil
        moveDir = Vector3.zero
        -- Restore walkspeed before destroying UI
        local char = player.Character
        local hum = char and char:FindFirstChildWhichIsA("Humanoid")
        if hum then
            hum.WalkSpeed = originalWalkSpeed
        end
        OrionLib:Destroy()
    end
})








local UtilTab = Window:MakeTab({
    Name = "Utility",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

UtilTab:AddButton({
    Name = "Load Nameless Admin",
    Callback = function()
    loadstring(game:HttpGet("https://github.com/ltseverydayyou/Nameless-Admin/raw/refs/heads/main/Source.lua"))()
    end
})

OrionLib:Init()
